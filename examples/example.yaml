# Description: Example configuration file for Vongola
# #
# Vongola is a reverse proxy server that can be used to route incoming requests to different upstream servers based on the request's host, path, headers, and other attributes.
#
# This configuration file specifies the following settings:
#
#
# ------------------------------------------------------------------
# The name of the service is "vongola".
# This will show in logs and it's mostly used for log filtering if needed
service_name: "vongola"

# Number of threads that the HTTPS service will use to handle incoming requests.
# This can be adjusted based on the number of CPU cores available on the server.
# The default value is 1.
#
# Note: Increasing the number of threads can improve the performance of the server,
# but it can also increase the memory usage.
#
# Note 2: This only affect the HTTPS service, the HTTP service
# (and other background services) is single threaded.
worker_threads: 4

# The configuration for the Docker integration
docker:
  # Whether the Docker integration is enabled
  # (the background service will run and listen for Docker events).
  # Default value is <false>.
  enabled: false

  # The interval in seconds at which the Docker integration will check for new containers.
  # The default value is 15 seconds.
  # important: the lower the value, the more work Vongola has to do.
  interval_secs: 15

  # The mode of the Docker integration.
  # The mode can be "container" or "swarm".
  # When the mode is set to "container", the integration will only
  # listen for labels in Docker containers
  # When the mode is set to "swarm", the integration will listen for Docker
  # events in a Docker Swarm cluster (service labels).
  # Default value is <container>.
  mode: "container"

  # The endpoint for the Docker API.
  # This can be a TCP endpoint or a Unix socket.
  # The default value is "unix:///var/run/docker.sock".
  endpoint: "unix:///var/run/docker.sock"

# The configuration for the Let's Encrypt integration.
lets_encrypt:

  # Whether the Let's Encrypt integration is enabled
  # (the background service will run and issue certificates for your routes).
  enabled: true

  # The email address to use for Let's Encrypt notifications and account registration.
  # Important: Make sure to replace this with your own email address.
  # any "@example.com" is invalid and will not work.
  email: "your-email@example.com"

  # The staging flag is used to test the Let's Encrypt integration without hitting the rate limits.
  # When set to <true>, the integration will use the Let's Encrypt staging environment.
  # --
  # When set to <false>, the integration will use the Let's Encrypt production environment
  # and certificates will be publicly trusted for 90 days.
  staging: true

# The logging configuration for the server.
logging:
  # Whether to log anything at all (default: true)
  enabled: true

  # The log level for the server (can be "DEBUG", "INFO", "WARN", "ERROR").
  level: "INFO"

  # Whether access logs are enabled.
  # When set to <true>, the server will log information about incoming requests.
  # This information includes the request method, path, status code, response time and more.
  access_logs_enabled: true

  # Whether error logs are enabled.
  error_logs_enabled: false

  # Formats "json" or "pretty""
  format: "pretty"

# The paths for the TLS certificates, challenges, orders, and account credentials.
# You can override any, these are the current defaults.
paths:

  # The path where the TLS certificates will be stored.
  # If the path doesn't exist, it will be created if the binary has the right permissions.
  lets_encrypt: "/etc/vongola/letsencrypt"


# The list of routes that the server will use to route incoming requests
# to different upstream servers.
# Each route is an item in the list and it has the following attributes:
routes:

  # The host attribute specifies the hostname that the route will match.
  # This is normally the domain, subdomain that you want to route to a particular server/ip.
  # This can be a domain name or an IP address. For IP address, no certificate will be issued.
  # The host attribute is required.
  - host: "example.com"
    # additional_hosts:
    #   - "www.example.com"
    #   - "api.example.com"

    # Match a given request path with the route.
    # You can have multiple matchers:
    # Path related
    # Header related
    match_with:
      path:
        patterns:
          - "/api/*"
          - "/api/v1/*"

    # SSL configuration for the route.
    # The ssl attribute is optional.
    ssl:
      self_signed_fallback: true
      path:
        key: "/etc/vongola/certs/my-host.key"
        pem: "/etc/vongola/certs/my-host.pem"

    # SSL configuration for the route (deprecated).
    ssl_certificate:
      # If the self_signed_on_fail attribute is set to <true>,
      # the server will use a self-signed certificate if the Let's Encrypt certificate
      # issuance fails. This is useful for development and testing purposes.
      #
      # If the self_signed_on_fail attribute is set to <false>
      # and let's encrypt fails to issue a certificate,
      # the server will respond with a SNI error that closes the connection.
      #
      # The default value is <true>.
      self_signed_on_failure: true

      # object_storage:
        # The object_storage attribute specifies the object storage
        # that will be used to store the certificates.
        # This can be "s3" or "gcs".
        # s3:
          # The s3 attribute specifies the configuration for the S3 object storage.
          # The configuration includes the bucket name, region, access key, and secret key.
          # bucket: "vongola-letsencrypt"
          # region: "us-east-1"
          # access_key: "<access_key>"
          # secret_key: "<secret_key>"

      # path:
        # The certificate attribute specifies the path to the certificate file.
        # This is the certificate that will be used to secure the connection.
        # The certificate file should be in PEM format.
        # In the near future you will be able to pass a s3 link or any other storage link.
        # crt: "/etc/vongola/letsencrypt/certs/example.com/cert.pem"

        # The key attribute specifies the path to the private key file.
        # This is the private key that will be used to secure the connection.
        # The private key file should be in PEM format.
        # key: "/etc/vongola/letsencrypt/certs/example.com/privkey.pem"


    # The headers attribute specifies the headers that will
    # be added or removed at the end of the response
    # --
    # In the near future you will be able to modify the headers
    # of the request send to the upstream server
    headers:
      # Adds the given headers to the dowstream (client) response
      add:
        - name: "X-Forwarded-For"
          value: "<value>"
        - name: "X-Api-Version"
          value: "1.0"
      # Removes the given headers from the dowstream (client) response
      remove:
        - name: "Server"
    # The upstreams attribute specifies the list of upstream servers that the route will use.
    # These are load balanced and the server will try to connect to the first one in the list.
    # If the connection fails, it will try the next one.
    # --
    # Health checks run in the background to ensure you have a healthy connection always.
    upstreams:
      # The IP address of the upstream server
      # (can be any IP address, as long as Vongola can access it).
      - ip: "10.1.2.24/24"
        # The port of the upstream server (can be any port).
        port: 3000
        # match_with:
        #   pattern: "/api/users/*"

        # The network attribute specifies the network that the upstream server is part of.
        # This is mostly important for Docker/Podman containers, but it can be used for other purposes.
        network: "public"

      - ip: "10.1.2.23/24"
        port: 3000
        network: "shared"
        # match_with:
        #   pattern: "/api/billing/*"

    # Plugins that will be applied to the route/host
    # (ex: rate limiting, oauth2, etc.)
    # Plugins can be used to extend the functionality of Vongola.
    # For example, the oauth2 plugin can be used to authenticate users using OAuth2 providers.
    plugins:
      # The name of the plugin (must be a valid plugin name)
      - name: "oauth2"
        config:
          client_id: "<client_id>"
          client_secret: "<client_secret>"
          jwt_secret: "<jwt_secret>" # The secret used to sign the JWT token
          # The validations key is used to specify the validations that the user must pass to
          validations:
            - key: "team_id"
              value:
                - "<team_id>"
            # The email key is used to specify the email address that
            # the user must have to pass the validation
            - key: "email"
              value:
                - "<user_email>"
